// Test generated by RoostGPT for test GoFinanceTest1 using AI Model gpt

package main

import (
	"database/sql"
	"log"
	"os"
	"testing"

	"github.com/joho/godotenv"
	_ "github.com/lib/pq"
	"github.com/wil-ckaew/gofinance-backend/api"
	db "github.com/wil-ckaew/gofinance-backend/db/sqlc"
)

func TestMain9117220388(t *testing.T) {
	err := godotenv.Load(".env.test")
	if err != nil {
		t.Error("Error loading .env.test file")
	}

	dbDriver := os.Getenv("DB_DRIVER")
	dbSource := os.Getenv("DB_SOURCE")
	serverAddress := os.Getenv("SERVER_ADDRESS")

	if dbDriver == "" || dbSource == "" || serverAddress == "" {
		t.Error("Environment variables not set correctly")
	}

	conn, err := sql.Open(dbDriver, dbSource)
	if err != nil {
		t.Error("Cannot connect to db: ", err)
	}

	store := db.NewStore(conn)
	server := api.NewServer(store)

	err = server.Start(serverAddress)
	if err != nil {
		t.Error("Cannot start api: ", err)
	}
}

func TestMain9117220388_InvalidEnv(t *testing.T) {
	err := godotenv.Load(".env.invalid")
	if err == nil {
		t.Error("Expected error loading invalid .env file, got none")
	}
}

func TestMain9117220388_InvalidDB(t *testing.T) {
	err := godotenv.Load(".env.test")
	if err != nil {
		t.Error("Error loading .env.test file")
	}

	os.Setenv("DB_DRIVER", "invalid_driver")
	os.Setenv("DB_SOURCE", "invalid_source")

	dbDriver := os.Getenv("DB_DRIVER")
	dbSource := os.Getenv("DB_SOURCE")

	conn, err := sql.Open(dbDriver, dbSource)
	if err == nil {
		t.Error("Expected error connecting to db with invalid driver and source, got none")
	}
}
